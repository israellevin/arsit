#!/bin/bash

chrootdir=chroot
if ! pushd "$chrootdir"; then
    echo creating tmpfs
    mkdir "$chrootdir"
    mount -t tmpfs -o size=60% none "$chrootdir" || exit 1
    pushd "$chrootdir"
fi

mirror=http://ftp.debian.org/debian
if [ ! -f sbin/init ]; then
    echo debootstrapping
    debootstrap --variant=minbase sid . "$mirror"
fi

sources[0]="$mirror sid main contrib non-free"
#sources[1]="$mirror stable main contrib non-free"
#sources[2]="http://www.deb-multimedia.org stable main non-free"
packages=linux-image-686-pae
packages="$packages bash-completion bc bsdmainutils git mc moreutils poppler-utils tmux unzip unrar vim"
packages="$packages aria2 ca-certificates curl dhcpcd iproute netbase openssh-server sshfs w3m wget"
packages="$packages alsa-base alsa-utils mpc mpd mpv"
packages="$packages libxcb-icccm4 libxcb-keysyms1 xinit xserver-xorg xserver-xorg-input-kbd xserver-xorg-video-vesa"
packages="$packages clipit feh imagemagick python-imaging redshift rxvt-unicode-256color sux unclutter vim-gtk"
packages="$packages conkeror conkeror-spawn-process-helper xautomation xul-ext-adblock-plus xul-ext-firebug"
packages="$packages nvidia-kernel-686-pae nvidia-vdpau-driver sensord xbmc xserver-xorg-video-nvidia"
if (read -n 1 -p 'install packages? (y/N) ' q; echo; [ y = "$q" ]); then
    mkdir -p etc/apt
    > etc/apt/sources.list
    for src in "${sources[@]}"; do
        echo "deb $src" >> etc/apt/sources.list
    done
    chroot . mkdir /fake
    for bin in initctl invoke-rc.d restart start stop start-stop-daemon service; do
        chroot . ln -s /bin/true /fake/$bin
    done
    chroot . apt-get update
    PATH=/fake:$PATH chroot . apt-get --no-install-recommends --force-yes -y install $packages
    rm -rf fake
fi

if (read -n 1 -p 'Configure? (y/N) ' q; echo; [ y = "$q" ]); then
    chroot . dpkg-reconfigure tzdata
    chroot . adduser i
    chroot . addgroup wheel
    chroot . adduser i wheel
    chroot . adduser i audio
    chroot . adduser i video
    chroot . adduser i disk
    chroot . adduser i fuse
    chroot . passwd -d root
fi

overlaydirs[0]=overlay
overlaydirs[1]=arsawat
if (read -n 1 -p 'Overlay? (y/N) ' q; echo; [ y = "$q" ]); then
    for dir in "${overlaydirs[@]}"; do
        rsync -av "../$dir/" .
    done
fi

targetdir=/tmp
gettarget(){
    if [ -d "$tr" ]; then
        read -n 1 -p "copy to $tr? (Y/n) " q; echo; echo
        [ n = "$q" ] || return 0
        tr=''
    else
        read -p "destination ($targetdir): " tr && [ "$tr" ] || tr="$targetdir"
    fi
    gettarget
}

if (read -n 1 -p 'copy tar? (y/N) ' q; echo; [ y = "$q" ]); then
    mv boot ../.
    rm -rf --one-file-system dev sys run proc tmp mnt
    mkdir dev sys run proc
    mkdir -m 777 tmp mnt
    gettarget
    tar cf - . | pv -s "$(du -sb . | awk '{print $1}')" > "$tr/ars.tar"
    mv ../boot .
fi

if (read -n 1 -p 'copy kernel? (y/N) ' q; echo; [ y = "$q" ]); then
    gettarget
    cp boot/vmlinuz* "$tr/arsvmlinuz"
fi

if (read -n 1 -p 'copy initrd? (y/N) ' q; echo; [ y = "$q" ]); then
    mkdir initrd
    pushd initrd
    cat ../boot/initrd* | gunzip | cpio -i
    rm -rf --one-file-system lib/modules
    cp -a ../lib/modules lib/.
    mkdir 'mnt'
    cp ../../local scripts/.
    cp "$(which pv)" 'bin/.'
    cp "$(which tar)" 'bin/.'
    gettarget
    find . -mount | cpio -o -H newc > "$tr/arsinitrd"
    popd
    rm -rf --one-file-system initrd
fi

exit 0
